    pipeline {
    agent any

    environment {
        DOCKERHUB_USER = 'n1az'
        IMAGE_NAME = "${DOCKERHUB_USER}/weather-api"
    }

    triggers {
        GenericTrigger(
            genericVariables: [
                [key: 'RELEASE_TAG', value: '$.release.tag_name']
            ],
            causeString: 'Triggered by GitHub Release $RELEASE_TAG',
            token: 'n1az-webhook-token',
            printContributedVariables: true,
            printPostContent: true
        )
    }

    stages {
        stage('Initialize') {
            steps {
                script {
                    if (!env.RELEASE_TAG) {
                        error("RELEASE_TAG was not provided by the webhook.")
                    }
                    env.VERSION_TAG = env.RELEASE_TAG // assign to another env var for clarity
                }
            }
        }

        stage('Debug Release Tag') {
            steps {
                echo "Received GitHub Release Tag: ${env.VERSION_TAG}"
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh "docker build -f pipeline/Dockerfile -t ${IMAGE_NAME}:${env.VERSION_TAG} --build-arg VERSION=${env.VERSION_TAG} ."
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        // Log in to Docker Hub with credentials
                        sh """
                            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
                            docker push ${IMAGE_NAME}:${env.VERSION_TAG}
                        """
                    }
                }
            }
        }

        stage('Deploy with Docker Compose') {
            steps {
                script {
                    sh """
                        export VERSION=${env.VERSION_TAG}
                        # Remove any existing weather-api container
                        docker rm -f weather-api || true
                        docker-compose -f pipeline/docker-compose.yaml up -d --build
                    """
                }
            }
        }
        stage('Verify Version') {
            steps {
                sh """
                    sleep 5
                    echo "Checking deployed version..."
                    curl -s http://192.168.31.230:9574/api/hello 
                """
            }
        }
    }
}

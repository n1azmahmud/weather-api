 pipeline {
    agent any

    environment {
        DOCKERHUB_USER = 'n1az'
        IMAGE_NAME = "${DOCKERHUB_USER}/weather-api"
    }

    triggers {
        GenericTrigger(
            genericVariables: [
                [key: 'RELEASE_TAG', value: '$.release.tag_name']
            ],
            causeString: 'Triggered by GitHub Release $RELEASE_TAG',
            token: 'n1az-webhook-token',
            printContributedVariables: true,
            printPostContent: true
        )
    }

    stages {
        stage('Initialize') {
            steps {
                script {
                    if (!env.RELEASE_TAG) {
                        error("RELEASE_TAG was not provided by the webhook.")
                    }
                    env.VERSION_TAG = env.RELEASE_TAG 
                }
            }
        }

        stage('Debug Release Tag') {
            steps {
                echo "Received GitHub Release Tag: ${env.VERSION_TAG}"
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh "docker build -f pipeline/Dockerfile -t ${IMAGE_NAME}:${env.VERSION_TAG} --build-arg VERSION=${env.VERSION_TAG} ."
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh """
                            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
                            docker push ${IMAGE_NAME}:${env.VERSION_TAG}
                        """
                    }
                }
            }
        }

        // stage('Deploy with Docker Compose') {
        //     steps {
        //         script {
        //             sh """
        //                 export VERSION=${env.VERSION_TAG}
        //                 # Remove any existing weather-api container
        //                 docker rm -f weather-api || true
        //                 docker-compose -f pipeline/docker-compose.yaml down -v --remove-orphans || true
        //                 docker-compose -f pipeline/docker-compose.yaml up -d --build
        //             """
        //         }
        //     }
        // }
                stage('Deploy to EKS') {
            steps {
                script {
                    sh """
                        aws eks update-kubeconfig --region us-east-1 --name weather-eks

                        echo "Deploying to EKS with tag ${env.VERSION_TAG}"

                        sed "s|IMAGE_TAG|${env.VERSION_TAG}|g" kubernetes/deployment.yaml > kubernetes/deployment-temp.yaml

                        kubectl apply -f kubernetes/secret.yaml
                        kubectl apply -f kubernetes/service.yaml
                        kubectl apply -f kubernetes/deployment-temp.yaml

                        rm kubernetes/deployment-temp.yaml
                    """
                }
            }
        }

    }
}
